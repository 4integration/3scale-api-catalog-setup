{
  "swagger": "2.0",
  "info": {
    "description": "OpenShift provides builds, application lifecycle, image content management,\nand administrative policy on top of Kubernetes. The API allows consistent\nmanagement of those objects.\n\nAll API operations are authenticated via an Authorization\tbearer token that\nis provided for service accounts as a generated secret (in JWT form) or via\nthe native OAuth endpoint located at /oauth/authorize. Core infrastructure\ncomponents may use client certificates that require no authentication.\n\n",
    "title": "OpenShift API (with Kubernetes)",
    "license": {
      "name": "Apache 2.0 (ASL2.0)",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "latest"
  },
  "paths": {
    "/apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}": {
      "get": {
        "description": "read the specified DeploymentConfig",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenshiftIo_v1"
        ],
        "operationId": "readAppsOpenshiftIoV1NamespacedDeploymentConfig",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.",
            "name": "exact",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Should this value be exported.  Export strips fields that a user can not specify.",
            "name": "export",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.openshift.origin.pkg.deploy.apis.apps.v1.DeploymentConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps.openshift.io",
          "version": "latest",
          "kind": "DeploymentConfig"
        }
      },
      "put": {
        "description": "replace the specified DeploymentConfig",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenshiftIo_v1"
        ],
        "operationId": "replaceAppsOpenshiftIoV1NamespacedDeploymentConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.openshift.origin.pkg.deploy.apis.apps.v1.DeploymentConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.openshift.origin.pkg.deploy.apis.apps.v1.DeploymentConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps.openshift.io",
          "version": "latest",
          "kind": "DeploymentConfig"
        }
      },
      "delete": {
        "description": "delete a DeploymentConfig",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenshiftIo_v1"
        ],
        "operationId": "deleteAppsOpenshiftIoV1NamespacedDeploymentConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "name": "gracePeriodSeconds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "name": "orphanDependents",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
            "name": "propagationPolicy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps.openshift.io",
          "version": "latest",
          "kind": "DeploymentConfig"
        }
      },
      "patch": {
        "description": "partially update the specified DeploymentConfig",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "appsOpenshiftIo_v1"
        ],
        "operationId": "patchAppsOpenshiftIoV1NamespacedDeploymentConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.openshift.origin.pkg.deploy.apis.apps.v1.DeploymentConfig"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps.openshift.io",
          "version": "latest",
          "kind": "DeploymentConfig"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the DeploymentConfig",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "object name and auth scope, such as for teams and projects",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        }
      ]
    }
  },
  "definitions": {},
  "securityDefinitions": {
    "BearerToken": {
      "description": "Bearer Token authentication",
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    },
    "Oauth2AccessToken": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://127.0.0.1:8443/oauth/authorize",
      "tokenUrl": "https://127.0.0.1:8443/oauth/token",
      "scopes": {
        "user:check-access": "Read-only access to view your privileges (for example, \"can I create builds?\")",
        "user:full": "Full read/write access with all of your permissions",
        "user:info": "Read-only access to your user information (including username, identities, and group membership)",
        "user:list-projects": "Read-only access to list your projects and view their metadata (display name, description, etc.)",
        "user:list-scoped-projects": "Read-only access to list your projects viewable with this token and view their metadata (display name, description, etc.)"
      }
    },
    "Oauth2Implicit": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://127.0.0.1:8443/oauth/authorize",
      "scopes": {
        "user:check-access": "Read-only access to view your privileges (for example, \"can I create builds?\")",
        "user:full": "Full read/write access with all of your permissions",
        "user:info": "Read-only access to your user information (including username, identities, and group membership)",
        "user:list-projects": "Read-only access to list your projects and view their metadata (display name, description, etc.)",
        "user:list-scoped-projects": "Read-only access to list your projects viewable with this token and view their metadata (display name, description, etc.)"
      }
    }
  },
  "security": [
    {
      "BearerToken": []
    },
    {
      "Oauth2AccessToken": []
    },
    {
      "Oauth2Implicit": []
    }
  ]
}