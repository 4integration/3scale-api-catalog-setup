{
  "swagger": "2.0",
  "info": {
    "description": "OpenShift provides builds, application lifecycle, image content management,\nand administrative policy on top of Kubernetes. The API allows consistent\nmanagement of those objects.\n\nAll API operations are authenticated via an Authorization\tbearer token that\nis provided for service accounts as a generated secret (in JWT form) or via\nthe native OAuth endpoint located at /oauth/authorize. Core infrastructure\ncomponents may use client certificates that require no authentication.\n\n",
    "title": "OpenShift API (with Kubernetes)",
    "license": {
      "name": "Apache 2.0 (ASL2.0)",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "latest"
  },
  "paths": {
    "/api/v1/bindings": {
      "post": {
        "description": "create a Binding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1BindingForAllNamespaces",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.kubernetes.pkg.api.v1.Binding"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kubernetes.pkg.api.v1.Binding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "Binding"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        }
      ]
    },
    "/api/v1/namespaces/{namespace}/services/{name}/status": {
      "get": {
        "description": "read status of the specified Service",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedServiceStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kubernetes.pkg.api.v1.Service"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "Service"
        }
      },
      "put": {
        "description": "replace status of the specified Service",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedServiceStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.kubernetes.pkg.api.v1.Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kubernetes.pkg.api.v1.Service"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "Service"
        }
      },
      "patch": {
        "description": "partially update status of the specified Service",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedServiceStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kubernetes.pkg.api.v1.Service"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "Service"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Service",
          "name": "name",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "object name and auth scope, such as for teams and projects",
          "name": "namespace",
          "in": "path",
          "required": true
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        }
      ]
    },
    "/api/v1/persistentvolumeclaims": {
      "get": {
        "description": "list or watch objects of kind PersistentVolumeClaim",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "listCoreV1PersistentVolumeClaimForAllNamespaces",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "name": "fieldSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "If true, partially initialized resources are included in the response.",
            "name": "includeUninitialized",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "name": "labelSelector",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
            "name": "resourceVersion",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "Timeout for the list/watch call.",
            "name": "timeoutSeconds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "name": "watch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaimList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "PersistentVolumeClaim"
        }
      },
      "post": {
        "description": "create a PersistentVolumeClaim",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1PersistentVolumeClaimForAllNamespaces",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kubernetes.pkg.api.v1.PersistentVolumeClaim"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "PersistentVolumeClaim"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "If 'true', then the output is pretty printed.",
          "name": "pretty",
          "in": "query"
        }
      ]
    },
    "/api/v1/proxy/nodes/{name}": {
      "get": {
        "description": "proxy GET requests to Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "proxyCoreV1GETNode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "proxy",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "Node"
        }
      },
      "put": {
        "description": "proxy PUT requests to Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "proxyCoreV1PUTNode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "proxy",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "Node"
        }
      },
      "post": {
        "description": "proxy POST requests to Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "proxyCoreV1POSTNode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "proxy",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "Node"
        }
      },
      "delete": {
        "description": "proxy DELETE requests to Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "proxyCoreV1DELETENode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "proxy",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "Node"
        }
      },
      "options": {
        "description": "proxy OPTIONS requests to Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "proxyCoreV1OPTIONSNode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "proxy",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "Node"
        }
      },
      "head": {
        "description": "proxy HEAD requests to Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "proxyCoreV1HEADNode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "proxy",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "Node"
        }
      },
      "patch": {
        "description": "proxy PATCH requests to Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "*/*"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "proxyCoreV1PATCHNode",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "proxy",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "version": "latest",
          "kind": "Node"
        }
      },
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "name of the Node",
          "name": "name",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
  	"io.k8s.kubernetes.pkg.api.v1.Binding": {
      "description": "Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.",
      "required": [
        "target"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "target": {
          "description": "The target object that you want to bind to the standard object.",
          "$ref": "#/definitions/io.k8s.kubernetes.pkg.api.v1.ObjectReference"
        }
      },
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "version": "latest",
          "kind": "Binding"
        }
      ]
    }
  },
  "securityDefinitions": {
    "BearerToken": {
      "description": "Bearer Token authentication",
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    },
    "Oauth2AccessToken": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://127.0.0.1:8443/oauth/authorize",
      "tokenUrl": "https://127.0.0.1:8443/oauth/token",
      "scopes": {
        "user:check-access": "Read-only access to view your privileges (for example, \"can I create builds?\")",
        "user:full": "Full read/write access with all of your permissions",
        "user:info": "Read-only access to your user information (including username, identities, and group membership)",
        "user:list-projects": "Read-only access to list your projects and view their metadata (display name, description, etc.)",
        "user:list-scoped-projects": "Read-only access to list your projects viewable with this token and view their metadata (display name, description, etc.)"
      }
    },
    "Oauth2Implicit": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://127.0.0.1:8443/oauth/authorize",
      "scopes": {
        "user:check-access": "Read-only access to view your privileges (for example, \"can I create builds?\")",
        "user:full": "Full read/write access with all of your permissions",
        "user:info": "Read-only access to your user information (including username, identities, and group membership)",
        "user:list-projects": "Read-only access to list your projects and view their metadata (display name, description, etc.)",
        "user:list-scoped-projects": "Read-only access to list your projects viewable with this token and view their metadata (display name, description, etc.)"
      }
    }
  },
  "security": [
    {
      "BearerToken": []
    },
    {
      "Oauth2AccessToken": []
    },
    {
      "Oauth2Implicit": []
    }
  ]
}